#notes for future me


1. In Express.js, router.param() is a method used to handle dynamic parameters in route paths. It allows you to define middleware functions that will be executed when certain parameters are present in the URL of a request. see checkId function in tourController as well as check doumentation for router.param for further details

----------------------------------------------------

2. we can create instance from our modal and then call a save method to upload the data:

const createNewTour = new Tour({ ...req.body });
createNewTour
    .save()
    .then((doc) => {
      return res.status(200).json(doc);
    })
    .catch((err) => {
      return res.status(500).json({
        status: "fail",
        message: "tour name must be unique",
        error: err,
      });
    }); 

or 

we can just directly pass the data in the modal using create method and await the response.   

const newTour = await Tour.create({ ...req.body });

----------------------------------------------------

3. its a common practice in Restful API that when the delete req happens we don't send any data.

----------------------------------------------------

4. we don't save imaged in the database itself but rather store their names on the database so later on we can actually get the names from database and get actual images from file system in our computer. 

----------------------------------------------------

5. watch lecture 94 on importing  data throught command line using process.args

----------------------------------------------------

6. req.params:

In Express, req.params is an object containing properties mapped to the named route "parameters". These parameters are specified in the route's path. It allows you to access values passed in the URL dynamically, making your routes more flexible and customizable.

example: 

app.get('/users/:id', (req, res) => {
  const userId = req.params.id;
  res.send(`User ID: ${userId}`);
});

In this route, :id is a route parameter, and req.params.id would contain the value passed for the "id" parameter in the URL. So, if you make a GET request to /users/123, req.params.id would be "123".

----------------------------------------------------

7. implementing api filtering

app.get('/search', (req, res) => {
  const searchTerm = req.query.q;
  res.send(`Search query: ${searchTerm}`);
});

if you make a request to /search?q=banana. In this case, req.query.q would be "banana".

So, req.query is an object containing all the query parameters, and you access individual parameters by their keys. In this example, q is the key for the search term parameter.

----------------------------------------------------

8. implentation for pagination

calculate start page = (Page−1) × Limit+1 = (1−1) × 10 +1 = 1

calculate end page index = Page×Limit = 1×10 = 10

Where:

Page is the current page number you are on.
Limit is the number of results (or records) per page.

Thus, for page 1, you would fetch results 1 to 10.

note: if you are dealing with arrays then in calculating startt index dont include +1 in the end because arrays are zero based and including +1 will skip the element present at zeroth position in array

note2: when using mongoose we only have to calculate startingIndex i.e, 

query.skip(skip).limit(myLimit);

where:

skip is startingPageIndex and limit is contant for example 10.

the way i have implemented pagination in thise course is very taxing and not scalable check bucket pattern on pagination. 

----------------------------------------------------

9. we can call a countDocuments function on a model to calc length of documents.check lec 99 on jonas node course

----------------------------------------------------

10. watch jonas video on aggregation pipeline some amazing top tier stuff in there for data manupilation 

----------------------------------------------------

11. Error Handelling Express: whenever we pass anything into next, it will assume that it is an error, and it will then skip all the other middlewares in the middleware stack and sent the error that we passed into our global error handling middleware,